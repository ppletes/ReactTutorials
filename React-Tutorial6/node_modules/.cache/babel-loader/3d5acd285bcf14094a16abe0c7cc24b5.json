{"ast":null,"code":"var _jsxFileName = \"/home/ag04admin/React-Tutorial6/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport \"./App.css\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport DemoList from \"./components/Demo/DemoList\";\nimport Button from \"./components/UI/Button/Button\"; //every component in which state is executed, component is revalidated/reexecuted\n//useCallBack() --> saving function in memory so the comparison with functions can work --> now React.memo(Button) will work and not show console.log because function is same as previous\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [showParagraph, setShowParagraph] = useState(false);\n  // const [allowToggle, setAllowToggle] = useState(false);\n  // console.log(\"APP RUNNING\");\n  //useCallback like useState garanties that setShowParagraph will be always the same object --> no need to put setShowParagraph in dependencies\n  // const toggleParagraphHandler = useCallback(() => {\n  //   if (allowToggle) {\n  //     setShowParagraph((prevShowParagraph) => !prevShowParagraph);\n  //   }\n  // }, [allowToggle]); //empty array of dependencies, same object function needs to be reused (never changed object) when the App component rerenders\n  // //whenever allowToggle change - recreate that function and store it\n  // const allowToggleHandler = () => {\n  //   setAllowToggle(true);\n  // };\n  const [listTitle, setListTitle] = useState(\"My List\");\n  const changeTitleHandler = useCallback(() => {\n    setListTitle(\"New Title\");\n  }, []);\n  const listItems = useMemo(() => [5, 3, 1, 10, 9], []);\n  return (\n    /*#__PURE__*/\n    //<h1>Hi there!</h1>\n    //<DemoOutput show={showParagraph} />\n    //<Button onClick={allowToggleHandler}>Allow Toggling</Button>\n    //<Button onClick={toggleParagraphHandler}>Toggle paragraph!</Button>\n    _jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(DemoList, {\n        title: listTitle,\n        items: listItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: changeTitleHandler,\n        children: \"Change List Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"CUGHf4Tc3EFz0m4/UzPZ8u3hP+g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ag04admin/React-Tutorial6/src/App.js"],"names":["React","useCallback","useState","useMemo","DemoOutput","DemoList","Button","App","listTitle","setListTitle","changeTitleHandler","listItems"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,OAAvC,QAAsD,OAAtD;AAEA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB,C,CAEA;AACA;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,SAAD,CAA1C;AAEA,QAAMQ,kBAAkB,GAAGT,WAAW,CAAC,MAAM;AAC3CQ,IAAAA,YAAY,CAAC,WAAD,CAAZ;AACD,GAFqC,EAEnC,EAFmC,CAAtC;AAIF,QAAME,SAAS,GAAGR,OAAO,CAAC,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,CAAd,CAAP,EAAyB,EAAzB,CAAzB;AAEE;AAAA;AACE;AACA;AACA;AACA;AACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEK,SAAjB;AAA4B,QAAA,KAAK,EAAEG;AAAnC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAED,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAUD;;GApCQH,G;;KAAAA,G;AAsCT,eAAeA,GAAf","sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\n\nimport \"./App.css\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport DemoList from \"./components/Demo/DemoList\";\nimport Button from \"./components/UI/Button/Button\";\n\n//every component in which state is executed, component is revalidated/reexecuted\n//useCallBack() --> saving function in memory so the comparison with functions can work --> now React.memo(Button) will work and not show console.log because function is same as previous\nfunction App() {\n  // const [showParagraph, setShowParagraph] = useState(false);\n  // const [allowToggle, setAllowToggle] = useState(false);\n\n  // console.log(\"APP RUNNING\");\n\n  //useCallback like useState garanties that setShowParagraph will be always the same object --> no need to put setShowParagraph in dependencies\n  // const toggleParagraphHandler = useCallback(() => {\n  //   if (allowToggle) {\n  //     setShowParagraph((prevShowParagraph) => !prevShowParagraph);\n  //   }\n  // }, [allowToggle]); //empty array of dependencies, same object function needs to be reused (never changed object) when the App component rerenders\n  // //whenever allowToggle change - recreate that function and store it\n\n  // const allowToggleHandler = () => {\n  //   setAllowToggle(true);\n  // };\n\n  const [listTitle, setListTitle] = useState(\"My List\");\n\n  const changeTitleHandler = useCallback(() => {\n    setListTitle(\"New Title\");\n  }, []);\n\nconst listItems = useMemo(() => [5, 3, 1, 10, 9], []);\n\n  return (\n    //<h1>Hi there!</h1>\n    //<DemoOutput show={showParagraph} />\n    //<Button onClick={allowToggleHandler}>Allow Toggling</Button>\n    //<Button onClick={toggleParagraphHandler}>Toggle paragraph!</Button>\n    <div className=\"app\">\n      <DemoList title={listTitle} items={listItems} />\n      <Button onClick={changeTitleHandler}>Change List Title</Button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}