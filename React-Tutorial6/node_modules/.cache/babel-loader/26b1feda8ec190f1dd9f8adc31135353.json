{"ast":null,"code":"var _jsxFileName = \"/home/ag04admin/React-Tutorial6/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport \"./App.css\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button\"; //every component in which state is executed, component is revalidated/reexecuted\n//useCallBack() --> saving function in memory so the comparison with functions can work --> now React.memo(Button) will work and not show console.log because function is same as previous\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showParagraph, setShowParagraph] = useState(false);\n  const [allowToggle, setAllowToggle] = useState(false);\n  console.log(\"APP RUNNING\"); //useCallback like useState garanties that setShowParagraph will be always the same object --> no need to put setShowParagraph in dependencies\n\n  const toggleParagraphHandler = useCallback(() => {\n    if (allowToggle) {\n      setShowParagraph(prevShowParagraph => !prevShowParagraph);\n    }\n  }, [allowToggle]); //empty array of dependencies, same object function needs to be reused (never changed object) when the App component rerenders\n  //whenever allowToggle change - recreate that function and store it\n\n  const allowToggleHandler = () => {\n    setAllowToggle(true);\n  };\n\n  const [listTitle, setListTitle] = useState(\"My List\");\n  const changeTitleHandler = useCallback(() => {\n    setListTitle;\n  }, []);\n  return (\n    /*#__PURE__*/\n    //<h1>Hi there!</h1>\n    //<DemoOutput show={showParagraph} />\n    //<Button onClick={allowToggleHandler}>Allow Toggling</Button>\n    _jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(DemoList, {\n        title: listTitle,\n        items: [5, 3, 1, 10, 9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: toggleParagraphHandler,\n        children: \"Toggle paragraph!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"/t+741bvrwAUUVqyymcbDlYm3TE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ag04admin/React-Tutorial6/src/App.js"],"names":["React","useCallback","useState","DemoOutput","Button","App","showParagraph","setShowParagraph","allowToggle","setAllowToggle","console","log","toggleParagraphHandler","prevShowParagraph","allowToggleHandler","listTitle","setListTitle","changeTitleHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,+BAAnB,C,CAEA;AACA;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,KAAD,CAA9C;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAJa,CAMb;;AACA,QAAMC,sBAAsB,GAAGX,WAAW,CAAC,MAAM;AAC/C,QAAIO,WAAJ,EAAiB;AACfD,MAAAA,gBAAgB,CAAEM,iBAAD,IAAuB,CAACA,iBAAzB,CAAhB;AACD;AACF,GAJyC,EAIvC,CAACL,WAAD,CAJuC,CAA1C,CAPa,CAWM;AACnB;;AAEA,QAAMM,kBAAkB,GAAG,MAAM;AAC/BL,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAIA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,SAAD,CAA1C;AAEA,QAAMe,kBAAkB,GAAGhB,WAAW,CAAC,MAAI;AACzCe,IAAAA,YAAY;AACb,GAFqC,EAEpC,EAFoC,CAAtC;AAIA;AAAA;AACE;AACA;AACA;AACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAED,SAAjB;AAA4B,QAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,CAAd;AAAnC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEH,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AASD;;GAjCQP,G;;KAAAA,G;AAmCT,eAAeA,GAAf","sourcesContent":["import React, { useCallback, useState } from \"react\";\n\nimport \"./App.css\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button\";\n\n//every component in which state is executed, component is revalidated/reexecuted\n//useCallBack() --> saving function in memory so the comparison with functions can work --> now React.memo(Button) will work and not show console.log because function is same as previous\nfunction App() {\n  const [showParagraph, setShowParagraph] = useState(false);\n  const [allowToggle, setAllowToggle] = useState(false);\n\n  console.log(\"APP RUNNING\");\n\n  //useCallback like useState garanties that setShowParagraph will be always the same object --> no need to put setShowParagraph in dependencies\n  const toggleParagraphHandler = useCallback(() => {\n    if (allowToggle) {\n      setShowParagraph((prevShowParagraph) => !prevShowParagraph);\n    }\n  }, [allowToggle]); //empty array of dependencies, same object function needs to be reused (never changed object) when the App component rerenders\n  //whenever allowToggle change - recreate that function and store it\n\n  const allowToggleHandler = () => {\n    setAllowToggle(true);\n  };\n\n  const [listTitle, setListTitle] = useState(\"My List\");\n\n  const changeTitleHandler = useCallback(()=>{\n    setListTitle\n  },[]);\n\n  return (\n    //<h1>Hi there!</h1>\n    //<DemoOutput show={showParagraph} />\n    //<Button onClick={allowToggleHandler}>Allow Toggling</Button>\n    <div className=\"app\">\n      <DemoList title={listTitle} items={[5, 3, 1, 10, 9]} />\n      <Button onClick={toggleParagraphHandler}>Toggle paragraph!</Button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}