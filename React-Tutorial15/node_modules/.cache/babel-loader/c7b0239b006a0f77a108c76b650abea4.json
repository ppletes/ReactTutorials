{"ast":null,"code":"var _jsxFileName = \"/home/ag04admin/AG04-tutorials/React-Tutorial15/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpiratioTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpiratioTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoredToken = () => {};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  //getting initial token from localStorage and using it in useState() method is possible because localStorage is a synchronous API\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/ag04admin/AG04-tutorials/React-Tutorial15/src/store/auth-context.js"],"names":["React","useState","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpiratioTime","remainingDuration","retrieveStoredToken","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","logoutHandler","removeItem","clearTimeout","loginHandler","setItem","remainingTime","setTimeout","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,IAAIC,WAAJ;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACtCC,EAAAA,KAAK,EAAE,EAD+B;AAEtCC,EAAAA,UAAU,EAAE,KAF0B;AAGtCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;AAItCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,gBAAgB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAAzB;AAEA,QAAME,iBAAiB,GAAGD,gBAAgB,GAAGH,WAA7C;AAEA,SAAOI,iBAAP;AACD,CAPD;;AASA,MAAMC,mBAAmB,GAAC,MAAI,CAE7B,CAFD;;AAIA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C;AACA,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;AACA,QAAM,CAAChB,KAAD,EAAQiB,QAAR,IAAoBrB,QAAQ,CAACkB,YAAD,CAAlC;AAEA,QAAMI,cAAc,GAAG,CAAC,CAAClB,KAAzB;;AAEA,QAAMmB,aAAa,GAAG,MAAM;AAC1BF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;;AAEA,QAAIvB,WAAJ,EAAiB;AACfwB,MAAAA,YAAY,CAACxB,WAAD,CAAZ;AACD;AACF,GAPD;;AASA,QAAMyB,YAAY,GAAG,CAACtB,KAAD,EAAQK,cAAR,KAA2B;AAC9CY,IAAAA,QAAQ,CAACjB,KAAD,CAAR;AACAe,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BvB,KAA9B;AAEA,UAAMwB,aAAa,GAAGpB,sBAAsB,CAACC,cAAD,CAA5C;AAEAR,IAAAA,WAAW,GAAG4B,UAAU,CAACN,aAAD,EAAgBK,aAAhB,CAAxB;AACD,GAPD;;AASA,QAAME,YAAY,GAAG;AACnB1B,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEiB,cAFO;AAGnBhB,IAAAA,KAAK,EAAEoB,YAHY;AAInBnB,IAAAA,MAAM,EAAEgB;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEO,YAA7B;AAAA,cACGb,KAAK,CAACc;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArCM;;GAAMf,mB;;KAAAA,mB;AAuCb,eAAed,WAAf","sourcesContent":["import React, { useState } from \"react\";\n\nlet logoutTimer;\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjExpiratioTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpiratioTime - currentTime;\n\n  return remainingDuration;\n};\n\nconst retrieveStoredToken=()=>{\n    \n};\n\nexport const AuthContextProvider = (props) => {\n  //getting initial token from localStorage and using it in useState() method is possible because localStorage is a synchronous API\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}