{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nexport const INCREMENT = \"increment\";\nconst initialState = {\n  counter: 0,\n  showCounter: true,\n  isAuth\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return { counter: state.counter + 1, showCounter: state.showCounter };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return { counter: state.counter - 1, showCounter: state.showCounter };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n//const store = createStore(counterSlice.reducer); --> if app is bigger this would be a problem because of more reducers - problem resolve: use configure store --> merge multiple reducers into one reducer\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); //use this as a global main reducer OR if there are multiple slices in bigger aplications use:\n//const store = configureStore({ reducer: {counter: counterSlice.reducer} }); --> merge all reducers into one reducer\n\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/ag04admin/AG04-tutorials/React-Tutorial12/src/store/index.js"],"names":["createStore","createSlice","configureStore","INCREMENT","initialState","counter","showCounter","isAuth","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,OAAO,MAAMC,SAAS,GAAG,WAAlB;AAEP,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE,IAA3B;AAAiCC,EAAAA;AAAjC,CAArB;AAEA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,SADyB;AAE/BL,EAAAA,YAF+B;AAG/BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KAHO;;AAIRQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KANO;;AAORS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AACD,KATO;;AAURC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACD;;AAZO;AAHqB,CAAD,CAAhC,C,CAmBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA,MAAMY,KAAK,GAAGhB,cAAc,CAAC;AAAEiB,EAAAA,OAAO,EAAEX,YAAY,CAACW;AAAxB,CAAD,CAA5B,C,CAAiE;AACjE;;AAEA,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAApC;AAEP,eAAeH,KAAf","sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nexport const INCREMENT = \"increment\";\n\nconst initialState = { counter: 0, showCounter: true, isAuth };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return { counter: state.counter + 1, showCounter: state.showCounter };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return { counter: state.counter - 1, showCounter: state.showCounter };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n//const store = createStore(counterSlice.reducer); --> if app is bigger this would be a problem because of more reducers - problem resolve: use configure store --> merge multiple reducers into one reducer\n\nconst store = configureStore({ reducer: counterSlice.reducer }); //use this as a global main reducer OR if there are multiple slices in bigger aplications use:\n//const store = configureStore({ reducer: {counter: counterSlice.reducer} }); --> merge all reducers into one reducer\n\nexport const counterActions = counterSlice.actions;\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}