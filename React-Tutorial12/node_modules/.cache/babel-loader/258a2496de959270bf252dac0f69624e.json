{"ast":null,"code":"import { createStore } from \"redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterSlice from './counter'; //export const INCREMENT = \"increment\";\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return { counter: state.counter + 1, showCounter: state.showCounter };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return { counter: state.counter - 1, showCounter: state.showCounter };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n//const store = createStore(counterSlice.reducer); --> if app is bigger this would be a problem because of more reducers - problem resolve: use configure store --> merge multiple reducers into one reducer\n//const store = configureStore({ reducer: counterSlice.reducer }); //use this as a global main reducer OR if there are multiple slices in bigger aplications use:\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n}); //merge all reducers into one reducer\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/ag04admin/AG04-tutorials/React-Tutorial12/src/store/index.js"],"names":["createStore","configureStore","counterSlice","store","reducer","counter","auth","authSlice","counterActions","actions","authActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,YAAP,MAAyB,WAAzB,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;AACA,MAAMC,KAAK,GAAGF,cAAc,CAAC;AAC3BG,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAEH,YAAY,CAACE,OAAxB;AAAiCE,IAAAA,IAAI,EAAEC,SAAS,CAACH;AAAjD;AADkB,CAAD,CAA5B,C,CAEI;;AAEJ,OAAO,MAAMI,cAAc,GAAGN,YAAY,CAACO,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACE,OAA9B;AAEP,eAAeN,KAAf","sourcesContent":["import { createStore } from \"redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterSlice from './counter';\n\n//export const INCREMENT = \"increment\";\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return { counter: state.counter + 1, showCounter: state.showCounter };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return { counter: state.counter - 1, showCounter: state.showCounter };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n//const store = createStore(counterSlice.reducer); --> if app is bigger this would be a problem because of more reducers - problem resolve: use configure store --> merge multiple reducers into one reducer\n\n//const store = configureStore({ reducer: counterSlice.reducer }); //use this as a global main reducer OR if there are multiple slices in bigger aplications use:\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n}); //merge all reducers into one reducer\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}