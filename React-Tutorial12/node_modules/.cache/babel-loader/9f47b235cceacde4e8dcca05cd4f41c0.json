{"ast":null,"code":"var _jsxFileName = \"/home/ag04admin/AG04-tutorials/React-Tutorial12/src/components/Counter.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Counter.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { counterActions } from \"../store/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const counter = useSelector(state => state.counter);\n  const show = useSelector(state => state.showCounter);\n\n  const incrementHandler = () => {\n    dispatch(counterActions.increment()); //execute as a function --> this will access in a full mode method action\n  };\n\n  const increaseHandler = () => {\n    dispatch({\n      type: \"increase\",\n      amount: 10\n    });\n  };\n\n  const decrementHandler = () => {\n    dispatch({\n      type: \"decrement\"\n    });\n  };\n\n  const toggleCounterHandler = () => {\n    dispatch({\n      type: \"toggle\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), show && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: \"Increase by 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Counter, \"a6W6bcAuHVADZPU2xn93xNQZltc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Counter;\nexport default Counter; // class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n//   toggleCounterHandler() {}\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n// const mapStateToProps = (state) => {\n//   return {\n//     counter: state.counter, //this is equivalent to doing it with hooks - useSelector...\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }), //calling dispatch with dispatch 'increment' type action\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n// // connect is called higher order component - execute the connect function that returns new function and then execute new function that we pass function Counter\n// //first argument that is passing connect function is mapStateToProps, and the second is mapDispatchToProps (equivalent to using dispatch in hooks)\n// //arguments are just pointers and they will be execute by react-redux\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter); // connect is called higher order component - execute the connect function that returns new function and then execute new function that we pass function Counter\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/home/ag04admin/AG04-tutorials/React-Tutorial12/src/components/Counter.js"],"names":["classes","useSelector","useDispatch","counterActions","Counter","dispatch","counter","state","show","showCounter","incrementHandler","increment","increaseHandler","type","amount","decrementHandler","toggleCounterHandler","value"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,QAA+B,gBAA/B;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMI,OAAO,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACD,OAAlB,CAA3B;AACA,QAAME,IAAI,GAAGP,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACE,WAAlB,CAAxB;;AAEA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BL,IAAAA,QAAQ,CAACF,cAAc,CAACQ,SAAf,EAAD,CAAR,CAD6B,CACS;AACvC,GAFD;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC5BP,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,MAAM,EAAE;AAA5B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BV,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMG,oBAAoB,GAAG,MAAM;AACjCX,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,sBACE;AAAM,IAAA,SAAS,EAAEb,OAAO,CAACM,OAAzB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,IAAI,iBAAI;AAAK,MAAA,SAAS,EAAER,OAAO,CAACiB,KAAxB;AAAA,gBAAgCX;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFX,eAGE;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAEI,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEE,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE;AAAQ,MAAA,OAAO,EAAEC,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAjCD;;GAAMZ,O;UACaF,W,EACDD,W,EACHA,W;;;KAHTG,O;AAmCN,eAAeA,OAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import classes from \"./Counter.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { counterActions } from \"../store/index\";\n\nconst Counter = () => {\n  const dispatch = useDispatch();\n  const counter = useSelector((state) => state.counter);\n  const show = useSelector((state) => state.showCounter);\n\n  const incrementHandler = () => {\n    dispatch(counterActions.increment()); //execute as a function --> this will access in a full mode method action\n  };\n\n  const increaseHandler = () => {\n    dispatch({ type: \"increase\", amount: 10 });\n  };\n\n  const decrementHandler = () => {\n    dispatch({ type: \"decrement\" });\n  };\n\n  const toggleCounterHandler = () => {\n    dispatch({ type: \"toggle\" });\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {show && <div className={classes.value}>{counter}</div>}\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase by 10</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n\n//   toggleCounterHandler() {}\n\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     counter: state.counter, //this is equivalent to doing it with hooks - useSelector...\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }), //calling dispatch with dispatch 'increment' type action\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n\n// // connect is called higher order component - execute the connect function that returns new function and then execute new function that we pass function Counter\n// //first argument that is passing connect function is mapStateToProps, and the second is mapDispatchToProps (equivalent to using dispatch in hooks)\n// //arguments are just pointers and they will be execute by react-redux\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter); // connect is called higher order component - execute the connect function that returns new function and then execute new function that we pass function Counter\n"]},"metadata":{},"sourceType":"module"}