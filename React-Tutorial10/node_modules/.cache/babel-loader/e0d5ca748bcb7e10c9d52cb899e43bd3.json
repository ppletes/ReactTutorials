{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\n\nconst useHttp = applyData => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        header: requestConfig.headers ? requestConfig.headers : {},\n        body: JSON.stringify(requestConfig.body) ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/home/ag04admin/React-Tutorial10/src/hooks/use-http.js"],"names":["useCallback","useState","useHttp","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","requestConfig","url","method","header","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAIC,SAAD,IAAe;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,WAAW,GAAGR,WAAW,CAC7B,YAAY;AACVK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACC,aAAa,CAACC,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEF,aAAa,CAACE,MAAd,GAAuBF,aAAa,CAACE,MAArC,GAA8C,KADR;AAE9CC,QAAAA,MAAM,EAAEH,aAAa,CAACI,OAAd,GAAwBJ,aAAa,CAACI,OAAtC,GAAgD,EAFV;AAG9CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,aAAa,CAACK,IAA7B,IACFC,IAAI,CAACC,SAAL,CAAeP,aAAa,CAACK,IAA7B,CADE,GAEF;AAL0C,OAApB,CAA5B;;AAQA,UAAI,CAACP,QAAQ,CAACU,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAT,EAAnB;AAEAnB,MAAAA,SAAS,CAACkB,IAAD,CAAT;AACD,KAhBD,CAgBE,OAAOE,GAAP,EAAY;AACZhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAxB4B,EAyB7B,CAACM,aAAD,EAAgBR,SAAhB,CAzB6B,CAA/B;AA4BA,SAAO;AACLC,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CArCD;;GAAMN,O;;AAuCN,eAAeA,OAAf","sourcesContent":["import { useCallback, useState } from \"react\";\n\nconst useHttp = (applyData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = useCallback(\n    async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(requestConfig.url, {\n          method: requestConfig.method ? requestConfig.method : \"GET\",\n          header: requestConfig.headers ? requestConfig.headers : {},\n          body: JSON.stringify(requestConfig.body)\n            ? JSON.stringify(requestConfig.body)\n            : null,\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Request failed!\");\n        }\n\n        const data = await response.json();\n\n        applyData(data);\n      } catch (err) {\n        setError(err.message || \"Something went wrong!\");\n      }\n      setIsLoading(false);\n    },\n    [requestConfig, applyData]\n  );\n\n  return {\n    isLoading,\n    error,\n    sendRequest,\n  };\n};\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}