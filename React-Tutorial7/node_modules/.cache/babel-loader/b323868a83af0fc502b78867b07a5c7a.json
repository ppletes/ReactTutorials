{"ast":null,"code":"var _jsxFileName = \"/home/ag04admin/React-Tutorial7/src/components/Users.js\";\nimport { Component } from \"react\";\nimport User from \"./User\";\nimport classes from \"./Users.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Users extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showUser: true //moreSTate: 'Test'\n      //nestetState: {},\n      //arrayState: []\n\n    };\n  }\n\n  componentDidUpdate() {\n    // try {\n    // someCodeWhichMightFail\n    // } catch (err) {}\n    if (this.props.users.lenght === 0) {\n      throw new Error(\"No users provided!\");\n    }\n  }\n\n  toggleUsersHandler() {\n    //this.state.showUser=false; --> NO!\n    //this.setState({ showUsers: false }); --> if I have more states, only defined one will be changed OR:\n    //this.setState((curState) => !curState); --> use when this state depends on previous state\n    //returning object\n    this.setState(curState => {\n      return {\n        showUsers: !curState.showUsers\n      };\n    });\n  }\n\n  render() {\n    const usersList = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.props.users.map(user => /*#__PURE__*/_jsxDEV(User, {\n        name: user.name\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n\n    return (\n      /*#__PURE__*/\n      //bind(this) --> \"this\" inside toggleUsersHandler() method is now set to have same context/value when keyword is revaluated (in button)\n      _jsxDEV(\"div\", {\n        className: classes.users,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.toggleUsersHandler.bind(this),\n          children: [this.state.showUsers ? \"Hide\" : \"Show\", \" Users\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), this.state.showUsers && usersList]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n} // const Users = () => {\n//   const [showUsers, setShowUsers] = useState(true);\n//   const toggleUsersHandler = () => {\n//     setShowUsers((curState) => !curState);\n//   };\n//   const usersList = (\n//     <ul>\n//       {DUMMY_USERS.map((user) => (\n//         <User key={user.id} name={user.name} />\n//       ))}\n//     </ul>\n//   );\n//   return (\n//     <div className={classes.users}>\n//       <button onClick={toggleUsersHandler}>\n//         {showUsers ? \"Hide\" : \"Show\"} Users\n//       </button>\n//       {showUsers && usersList}\n//     </div>\n//   );\n// };\n\n\nexport default Users;","map":{"version":3,"sources":["/home/ag04admin/React-Tutorial7/src/components/Users.js"],"names":["Component","User","classes","Users","constructor","state","showUser","componentDidUpdate","props","users","lenght","Error","toggleUsersHandler","setState","curState","showUsers","render","usersList","map","user","name","id","bind"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,OAAP,MAAoB,oBAApB;;;AAEA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAC5BI,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,IADC,CAEX;AACA;AACA;;AAJW,KAAb;AAMD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB;AACA;AACA;AAEA,QAAI,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB;AACA;AACA;AAEA;AACA,SAAKC,QAAL,CAAeC,QAAD,IAAc;AAC1B,aAAO;AAAEC,QAAAA,SAAS,EAAE,CAACD,QAAQ,CAACC;AAAvB,OAAP;AACD,KAFD;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,SAAS,gBACb;AAAA,gBACG,KAAKT,KAAL,CAAWC,KAAX,CAAiBS,GAAjB,CAAsBC,IAAD,iBACpB,QAAC,IAAD;AAAoB,QAAA,IAAI,EAAEA,IAAI,CAACC;AAA/B,SAAWD,IAAI,CAACE,EAAhB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;;AAQA;AAAA;AACE;AACA;AAAK,QAAA,SAAS,EAAEnB,OAAO,CAACO,KAAxB;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAE,KAAKG,kBAAL,CAAwBU,IAAxB,CAA6B,IAA7B,CAAjB;AAAA,qBACG,KAAKjB,KAAL,CAAWU,SAAX,GAAuB,MAAvB,GAAgC,MADnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIG,KAAKV,KAAL,CAAWU,SAAX,IAAwBE,SAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AASD;;AAlD2B,C,CAqD9B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAed,KAAf","sourcesContent":["import { Component } from \"react\";\nimport User from \"./User\";\n\nimport classes from \"./Users.module.css\";\n\nclass Users extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showUser: true,\n      //moreSTate: 'Test'\n      //nestetState: {},\n      //arrayState: []\n    };\n  }\n\n  componentDidUpdate() {\n    // try {\n    // someCodeWhichMightFail\n    // } catch (err) {}\n\n    if (this.props.users.lenght === 0) {\n      throw new Error(\"No users provided!\");\n    }\n  }\n\n  toggleUsersHandler() {\n    //this.state.showUser=false; --> NO!\n    //this.setState({ showUsers: false }); --> if I have more states, only defined one will be changed OR:\n    //this.setState((curState) => !curState); --> use when this state depends on previous state\n\n    //returning object\n    this.setState((curState) => {\n      return { showUsers: !curState.showUsers };\n    });\n  }\n\n  render() {\n    const usersList = (\n      <ul>\n        {this.props.users.map((user) => (\n          <User key={user.id} name={user.name} />\n        ))}\n      </ul>\n    );\n\n    return (\n      //bind(this) --> \"this\" inside toggleUsersHandler() method is now set to have same context/value when keyword is revaluated (in button)\n      <div className={classes.users}>\n        <button onClick={this.toggleUsersHandler.bind(this)}>\n          {this.state.showUsers ? \"Hide\" : \"Show\"} Users\n        </button>\n        {this.state.showUsers && usersList}\n      </div>\n    );\n  }\n}\n\n// const Users = () => {\n//   const [showUsers, setShowUsers] = useState(true);\n\n//   const toggleUsersHandler = () => {\n//     setShowUsers((curState) => !curState);\n//   };\n\n//   const usersList = (\n//     <ul>\n//       {DUMMY_USERS.map((user) => (\n//         <User key={user.id} name={user.name} />\n//       ))}\n//     </ul>\n//   );\n\n//   return (\n//     <div className={classes.users}>\n//       <button onClick={toggleUsersHandler}>\n//         {showUsers ? \"Hide\" : \"Show\"} Users\n//       </button>\n//       {showUsers && usersList}\n//     </div>\n//   );\n// };\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}